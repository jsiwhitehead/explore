// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Data from "../maraca/Data.res.mjs";
import * as Docs from "./Docs.res.mjs";
import * as Parse from "../maraca/Parse.res.mjs";
import * as Render from "../maraca/Render.res.mjs";
import * as Resolve from "../maraca/Resolve.res.mjs";
import * as Evaluate from "../maraca/Evaluate.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function s(strings, param) {
  return Parse.parse(Core__Option.getOr(strings[0], ""));
}

function l(items) {
  return {
          NAME: "Block",
          VAL: [
            {},
            items
          ]
        };
}

var code_1 = [
  {
    selected: {
      NAME: "Atom",
      VAL: {
        NAME: "Block",
        VAL: [
          {},
          []
        ]
      }
    },
    paragraphs: s(["{getParagraphs(selected)}"], [])
  },
  [{
      NAME: "Block",
      VAL: [
        {
          font: s(["Atkinson Hyperlegible, sans-serif"], []),
          color: s(["#333"], []),
          size: s(["17"], []),
          gap: s(["30"], []),
          pad: s(["50"], []),
          fill: s(["#fafaed"], []),
          minHeight: s(["100%"], [])
        },
        [
          {
            NAME: "Block",
            VAL: [
              {
                bold: s(["yes"], []),
                flow: s(["row"], []),
                gap: s(["10"], [])
              },
              [
                {
                  NAME: "BlockTrigger",
                  VAL: [
                    {
                      click: {
                        NAME: "Atom",
                        VAL: "Empty"
                      }
                    },
                    [[
                        s(["{click}"], []),
                        s(["{yes}"], []),
                        [[
                            {
                              NAME: "Block",
                              VAL: [
                                {},
                                []
                              ]
                            },
                            s(["{selected}"], [])
                          ]]
                      ]],
                    [s(["All"], [])]
                  ]
                },
                {
                  NAME: "ForIndex",
                  VAL: [
                    s(["{selected}"], []),
                    "label",
                    "index",
                    {
                      NAME: "Scope",
                      VAL: [
                        {},
                        [
                          s(["â–¸"], []),
                          {
                            NAME: "BlockTrigger",
                            VAL: [
                              {
                                click: {
                                  NAME: "Atom",
                                  VAL: "Empty"
                                }
                              },
                              [[
                                  s(["{click}"], []),
                                  s(["{yes}"], []),
                                  [[
                                      s(["{slice(selected, 1, index)}"], []),
                                      s(["{selected}"], [])
                                    ]]
                                ]],
                              [s(["{label}"], [])]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            ]
          },
          {
            NAME: "IfElse",
            VAL: [
              s(["{paragraphs}"], []),
              {
                NAME: "Block",
                VAL: [
                  {
                    gap: s(["25"], []),
                    maxWidth: s(["670"], [])
                  },
                  [{
                      NAME: "For",
                      VAL: [
                        s(["{paragraphs}"], []),
                        "paragraph",
                        {
                          NAME: "Block",
                          VAL: [
                            {
                              size: s(["{paragraph.type = 'title' ? 25 - paragraph.level * 2 : 17}"], []),
                              bold: s(["{paragraph.type = 'quote' | (paragraph.type = 'title' & paragraph.level <= 2)}"], []),
                              italic: s(["{paragraph.type = 'info' | (paragraph.type = 'title' & paragraph.level > 2)}"], []),
                              uppercase: s(["{paragraph.type = 'call' | (paragraph.type = 'title' & paragraph.level = 1)}"], []),
                              align: s(["{paragraph.type = 'section' ? 'center' : paragraph.type = 'info' | paragraph.type = 'call' ? 'justify-center' : 'left'}"], []),
                              pad: l([
                                    s(["{paragraph.type = 'title' & paragraph.level = 1 ? 20 : 0}"], []),
                                    s(["{\n                        paragraph.type = 'quote' ? 20 :\n                        paragraph.type = 'info' | paragraph.type = 'call' ? 40 :\n                        paragraph.type = 'lines' ? 70 :\n                        paragraph.type = 'title' & paragraph.level > 2 ? (paragraph.level - 2) * 20 :\n                        0\n                      }"], []),
                                    s(["0"], [])
                                  ]),
                              indent: s(["{paragraph.type = '' ? 20 : paragraph.type = 'lines' ? -30 : 0}"], []),
                              gap: s(["8.5"], []),
                              whitespace: s(["pre-wrap"], [])
                            },
                            [s(["{...paragraph.text}"], [])]
                          ]
                        }
                      ]
                    }]
                ]
              },
              {
                NAME: "Block",
                VAL: [
                  {
                    gap: s(["20"], [])
                  },
                  [{
                      NAME: "For",
                      VAL: [
                        s(["{getList(selected)}"], []),
                        "label",
                        {
                          NAME: "BlockTrigger",
                          VAL: [
                            {
                              click: {
                                NAME: "Atom",
                                VAL: "Empty"
                              }
                            },
                            [[
                                s(["{click}"], []),
                                s(["{yes}"], []),
                                [[
                                    {
                                      NAME: "Block",
                                      VAL: [
                                        {},
                                        [
                                          s(["{...selected}"], []),
                                          s(["{label}"], [])
                                        ]
                                      ]
                                    },
                                    s(["{selected}"], [])
                                  ]]
                              ]],
                            [s(["{label}"], [])]
                          ]
                        }
                      ]
                    }]
                ]
              }
            ]
          }
        ]
      ]
    }]
];

var code = {
  NAME: "Scope",
  VAL: code_1
};

function f(map) {
  return {
          TAG: "Single",
          _0: {
            TAG: "Data",
            _0: {
              NAME: "Func",
              VAL: (function (args) {
                  return {
                          TAG: "Single",
                          _0: {
                            TAG: "Signal",
                            _0: {
                              TAG: "Computed",
                              _0: Data.computedValue(function () {
                                    return map(args.map(Resolve.resolveValueOption));
                                  })
                            }
                          }
                        };
                })
            }
          }
        };
}

Render.render(Evaluate.evaluate(code, {
          slice: f(function (args) {
                if (args.length !== 3) {
                  return "Empty";
                }
                var match = args[0];
                if (match === undefined) {
                  return "Empty";
                }
                if (typeof match !== "object") {
                  return "Empty";
                }
                if (match.NAME !== "Block") {
                  return "Empty";
                }
                var match$1 = args[1];
                if (match$1 === undefined) {
                  return "Empty";
                }
                if (typeof match$1 !== "object") {
                  return "Empty";
                }
                if (match$1.NAME !== "Float") {
                  return "Empty";
                }
                var start = match$1.VAL;
                var match$2 = args[2];
                if (match$2 === undefined) {
                  return "Empty";
                }
                if (typeof match$2 !== "object") {
                  return "Empty";
                }
                if (match$2.NAME !== "Float") {
                  return "Empty";
                }
                var end = match$2.VAL;
                if (Number.isInteger(start) && Number.isInteger(end)) {
                  return {
                          TAG: "Single",
                          _0: {
                            TAG: "Data",
                            _0: {
                              NAME: "Block",
                              VAL: [
                                {},
                                match.VAL[1].slice((start | 0) - 1 | 0, end | 0)
                              ]
                            }
                          }
                        };
                } else {
                  return "Empty";
                }
              }),
          getParagraphs: f(function (args) {
                if (args.length !== 1) {
                  return "Empty";
                }
                var match = args[0];
                if (match !== undefined && typeof match === "object" && match.NAME === "Block") {
                  return Core__Option.mapOr(Docs.getParagraphs(Core__Array.filterMap(match.VAL[1], (function (item) {
                                        var match = Resolve.resolveValueOption(item);
                                        if (match !== undefined && typeof match === "object" && match.NAME === "String") {
                                          return match.VAL;
                                        }
                                        
                                      }))), "Empty", (function (paragraphs) {
                                return {
                                        TAG: "Single",
                                        _0: {
                                          TAG: "Data",
                                          _0: {
                                            NAME: "Block",
                                            VAL: [
                                              {},
                                              paragraphs.map(function (param) {
                                                    return {
                                                            TAG: "Single",
                                                            _0: {
                                                              TAG: "Data",
                                                              _0: {
                                                                NAME: "Block",
                                                                VAL: [
                                                                  {
                                                                    type: {
                                                                      TAG: "Single",
                                                                      _0: {
                                                                        TAG: "Data",
                                                                        _0: {
                                                                          NAME: "String",
                                                                          VAL: param[0]
                                                                        }
                                                                      }
                                                                    },
                                                                    text: {
                                                                      TAG: "Single",
                                                                      _0: {
                                                                        TAG: "Data",
                                                                        _0: {
                                                                          NAME: "Block",
                                                                          VAL: [
                                                                            {},
                                                                            param[1].map(function (t) {
                                                                                  return {
                                                                                          TAG: "Single",
                                                                                          _0: {
                                                                                            TAG: "Data",
                                                                                            _0: {
                                                                                              NAME: "String",
                                                                                              VAL: t
                                                                                            }
                                                                                          }
                                                                                        };
                                                                                })
                                                                          ]
                                                                        }
                                                                      }
                                                                    },
                                                                    level: {
                                                                      TAG: "Single",
                                                                      _0: {
                                                                        TAG: "Data",
                                                                        _0: {
                                                                          NAME: "Float",
                                                                          VAL: param[2]
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  []
                                                                ]
                                                              }
                                                            }
                                                          };
                                                  })
                                            ]
                                          }
                                        }
                                      };
                              }));
                } else {
                  return "Empty";
                }
              }),
          getList: f(function (args) {
                if (args.length !== 1) {
                  return "Empty";
                }
                var match = args[0];
                if (match !== undefined && typeof match === "object" && match.NAME === "Block") {
                  return {
                          TAG: "Single",
                          _0: {
                            TAG: "Data",
                            _0: l(Docs.getList(Core__Array.filterMap(match.VAL[1], (function (item) {
                                              var match = Resolve.resolveValueOption(item);
                                              if (match !== undefined && typeof match === "object" && match.NAME === "String") {
                                                return match.VAL;
                                              }
                                              
                                            }))).map(function (collection) {
                                      return {
                                              TAG: "Single",
                                              _0: {
                                                TAG: "Data",
                                                _0: {
                                                  NAME: "String",
                                                  VAL: collection
                                                }
                                              }
                                            };
                                    }))
                          }
                        };
                } else {
                  return "Empty";
                }
              })
        }));

export {
  s ,
  l ,
  code ,
  f ,
}
/* code Not a pure module */
