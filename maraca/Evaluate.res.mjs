// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Data from "./Data.res.mjs";
import * as Resolve from "./Resolve.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var Has_Signal = /* @__PURE__ */Caml_exceptions.create("Evaluate.Has_Signal");

function tryValueToData(arg) {
  var match = Data.setToOption(arg);
  if (match === undefined) {
    return ;
  }
  if (match.TAG === "Data") {
    return match._0;
  }
  throw {
        RE_EXN_ID: Has_Signal,
        Error: new Error()
      };
}

function signalValueToData(arg) {
  return Core__Option.flatMap(Data.setToOption(arg), (function (x) {
                return Resolve.resolveDataOption(x);
              }));
}

function signalMap(map) {
  try {
    return map(tryValueToData);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Has_Signal) {
      return {
              TAG: "Single",
              _0: {
                TAG: "Signal",
                _0: {
                  TAG: "Computed",
                  _0: Data.computedValue(function () {
                        return map(signalValueToData);
                      })
                }
              }
            };
    }
    throw exn;
  }
}

function mapOne(value, map) {
  return signalMap(function (resolve) {
              return map(resolve(value));
            });
}

function mapTwo(value1, value2, map) {
  return signalMap(function (resolve) {
              return map(resolve(value1), resolve(value2));
            });
}

function mapArray(values, map) {
  return signalMap(function (resolve) {
              return map(values.map(function (value) {
                              return resolve(value);
                            }));
            });
}

function tryGetIndex(_value, _index) {
  while(true) {
    var index = _index;
    var value = _value;
    var data;
    if (index === 0) {
      return {
              TAG: "Error",
              _0: 0
            };
    }
    if (typeof value !== "object") {
      return {
              TAG: "Error",
              _0: index
            };
    }
    if (value.TAG === "Single") {
      var data$1 = value._0;
      if (data$1.TAG === "Data") {
        data = data$1._0;
      } else {
        throw {
              RE_EXN_ID: Has_Signal,
              Error: new Error()
            };
      }
    } else {
      var data$2 = value._0;
      if (data$2.TAG === "Data") {
        data = data$2._0;
      } else {
        throw {
              RE_EXN_ID: Has_Signal,
              Error: new Error()
            };
      }
    }
    if (index === 1) {
      return {
              TAG: "Ok",
              _0: data
            };
    }
    if (typeof value === "object") {
      if (value.TAG === "Single") {
        return {
                TAG: "Error",
                _0: index
              };
      }
      _index = index - 1 | 0;
      _value = Data.arrayToSet(value._1);
      continue ;
    }
    
  };
}

function getIndex(_value, _index) {
  while(true) {
    var index = _index;
    var value = _value;
    var data;
    if (index === 0) {
      return {
              TAG: "Error",
              _0: 0
            };
    }
    if (typeof value !== "object") {
      return {
              TAG: "Error",
              _0: index
            };
    }
    if (value.TAG === "Single") {
      var signal = value._0;
      if (signal.TAG === "Data") {
        data = signal._0;
      } else {
        _value = Data.get(signal._0);
        continue ;
      }
    } else {
      var signal$1 = value._0;
      if (signal$1.TAG === "Data") {
        data = signal$1._0;
      } else {
        _value = Data.arrayToSet(Belt_Array.concatMany([
                  Data.setToArray(Data.get(signal$1._0)),
                  value._1
                ]));
        continue ;
      }
    }
    if (index === 1) {
      return {
              TAG: "Ok",
              _0: data
            };
    }
    if (typeof value === "object") {
      if (value.TAG === "Single") {
        return {
                TAG: "Error",
                _0: index
              };
      }
      _index = index - 1 | 0;
      _value = Data.arrayToSet(value._1);
      continue ;
    }
    
  };
}

function evaluateBlock(values, items, context) {
  var newContext = Object.assign({}, context);
  var evalValues = Object.fromEntries(Object.entries(values).map(function (param) {
            var key = param[0];
            var value = evaluate(param[1], newContext);
            newContext[key] = value;
            return [
                    key,
                    value
                  ];
          }));
  var evalItems = items.map(function (code) {
        return evaluate(code, newContext);
      });
  return [
          evalValues,
          evalItems,
          newContext
        ];
}

function evaluateTrigger(param, value, context) {
  var evalTrigger = evaluate(param[0], context);
  var evalTest = evaluate(param[1], context);
  var evalUpdates = param[2].map(function (param) {
        return [
                evaluate(param[0], context),
                evaluate(param[1], context)
              ];
      });
  var isFirst = {
    contents: true
  };
  return {
          TAG: "Single",
          _0: {
            TAG: "Signal",
            _0: {
              TAG: "Computed",
              _0: Data.computedValue(function () {
                    Resolve.resolveDeepValueArray(evalTrigger);
                    Data.untracked(function () {
                          if (isFirst.contents) {
                            isFirst.contents = false;
                            return ;
                          } else if (Data.dataToBool(Resolve.resolveValueOption(evalTest))) {
                            return Data.batch(function () {
                                        evalUpdates.forEach(function (param) {
                                              var next = Data.optionToSet(Core__Option.map(Resolve.resolveDeepValueOption(param[0]), Data.dataToSignalData));
                                              Core__Option.mapOr(Resolve.resolveValueAtom(param[1]), undefined, (function (set) {
                                                      set(next);
                                                    }));
                                            });
                                      });
                          } else {
                            return ;
                          }
                        });
                    return value;
                  })
            }
          }
        };
}

function evaluate(code, context) {
  if (typeof code !== "object") {
    return "Empty";
  }
  var variant = code.NAME;
  if (variant === "String") {
    return {
            TAG: "Single",
            _0: {
              TAG: "Data",
              _0: {
                NAME: "String",
                VAL: code.VAL
              }
            }
          };
  }
  if (variant === "Block") {
    var match = code.VAL;
    var match$1 = evaluateBlock(match[0], match[1], context);
    return {
            TAG: "Single",
            _0: {
              TAG: "Data",
              _0: {
                NAME: "Block",
                VAL: [
                  match$1[0],
                  match$1[1]
                ]
              }
            }
          };
  }
  if (variant === "Function") {
    var match$2 = code.VAL;
    var body = match$2[1];
    var labels = match$2[0];
    return {
            TAG: "Single",
            _0: {
              TAG: "Data",
              _0: {
                NAME: "Func",
                VAL: (function (args) {
                    var newContext = Object.assign(Object.assign({}, context), Object.fromEntries(Belt_Array.zip(labels, args)));
                    return evaluate(body, newContext);
                  })
              }
            }
          };
  }
  if (variant === "If") {
    var match$3 = code.VAL;
    var evalThen = evaluate(match$3[1], context);
    return mapOne(evaluate(match$3[0], context), (function (test) {
                  if (Data.dataToBool(test)) {
                    return evalThen;
                  } else {
                    return "Empty";
                  }
                }));
  }
  if (variant === "For") {
    var match$4 = code.VAL;
    var body$1 = match$4[2];
    var label = match$4[1];
    return mapOne(evaluate(match$4[0], context), (function (block) {
                  if (block !== undefined && typeof block === "object" && block.NAME === "Block") {
                    return Data.arrayToSet(block.VAL[1].flatMap(function (data) {
                                    var newContext = Object.assign({}, context);
                                    newContext[label] = data;
                                    return Data.setToArray(evaluate(body$1, newContext));
                                  }));
                  } else {
                    return "Empty";
                  }
                }));
  }
  if (variant === "Get") {
    var match$5 = code.VAL;
    return mapTwo(evaluate(match$5[0], context), evaluate(match$5[1], context), (function (block, key) {
                  if (block === undefined) {
                    return "Empty";
                  }
                  if (typeof block !== "object") {
                    return "Empty";
                  }
                  if (block.NAME !== "Block") {
                    return "Empty";
                  }
                  if (key === undefined) {
                    return "Empty";
                  }
                  if (typeof key !== "object") {
                    return "Empty";
                  }
                  var variant = key.NAME;
                  var match = block.VAL;
                  var items = match[1];
                  if (variant === "String") {
                    var data = match[0][key.VAL];
                    if (data !== undefined) {
                      return data;
                    } else {
                      return "Empty";
                    }
                  }
                  if (variant !== "Float") {
                    return "Empty";
                  }
                  var $$float = key.VAL;
                  if (!Number.isInteger($$float)) {
                    return "Empty";
                  }
                  try {
                    var index = {
                      contents: $$float | 0
                    };
                    return Data.optionToSet(Core__Array.findMap(items, (function (value) {
                                      var data = tryGetIndex(value, index.contents);
                                      if (data.TAG === "Ok") {
                                        return {
                                                TAG: "Data",
                                                _0: data._0
                                              };
                                      }
                                      index.contents = data._0;
                                    })));
                  }
                  catch (raw_exn){
                    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                    if (exn.RE_EXN_ID === Has_Signal) {
                      var index$1 = {
                        contents: $$float | 0
                      };
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Signal",
                                _0: {
                                  TAG: "Computed",
                                  _0: Data.computedValue(function () {
                                        return Data.optionToSet(Core__Array.findMap(items, (function (value) {
                                                          var data = getIndex(value, index$1.contents);
                                                          if (data.TAG === "Ok") {
                                                            return {
                                                                    TAG: "Data",
                                                                    _0: data._0
                                                                  };
                                                          }
                                                          index$1.contents = data._0;
                                                        })));
                                      })
                                }
                              }
                            };
                    }
                    throw exn;
                  }
                }));
  }
  if (variant === "Label") {
    var data = context[code.VAL];
    if (data !== undefined) {
      return data;
    } else {
      return "Empty";
    }
  }
  if (variant === "Scope") {
    var match$6 = code.VAL;
    var match$7 = evaluateBlock(match$6[0], match$6[1], context);
    return Data.arrayToSet(match$7[1].flatMap(function (x) {
                    return Data.setToArray(x);
                  }));
  }
  if (variant === "ForIndex") {
    var match$8 = code.VAL;
    var body$2 = match$8[3];
    var indexLabel = match$8[2];
    var label$1 = match$8[1];
    return mapOne(evaluate(match$8[0], context), (function (block) {
                  if (block !== undefined && typeof block === "object" && block.NAME === "Block") {
                    return Data.arrayToSet(block.VAL[1].flatMap(function (data, index) {
                                    var newContext = Object.assign({}, context);
                                    newContext[label$1] = data;
                                    newContext[indexLabel] = {
                                      TAG: "Single",
                                      _0: {
                                        TAG: "Data",
                                        _0: {
                                          NAME: "Float",
                                          VAL: index + 1 | 0
                                        }
                                      }
                                    };
                                    return Data.setToArray(evaluate(body$2, newContext));
                                  }));
                  } else {
                    return "Empty";
                  }
                }));
  }
  if (variant === "Float") {
    return {
            TAG: "Single",
            _0: {
              TAG: "Data",
              _0: {
                NAME: "Float",
                VAL: code.VAL
              }
            }
          };
  }
  if (variant === "IfElse") {
    var match$9 = code.VAL;
    var evalThen$1 = evaluate(match$9[1], context);
    var evalElse = evaluate(match$9[2], context);
    return mapOne(evaluate(match$9[0], context), (function (test) {
                  if (Data.dataToBool(test)) {
                    return evalThen$1;
                  } else {
                    return evalElse;
                  }
                }));
  }
  if (variant === "Unpack") {
    return mapOne(evaluate(code.VAL, context), (function (value) {
                  if (value !== undefined && typeof value === "object" && value.NAME === "Block") {
                    return Data.arrayToSet(value.VAL[1].flatMap(function (data) {
                                    return Data.setToArray(data);
                                  }));
                  } else {
                    return "Empty";
                  }
                }));
  }
  if (variant === "BlockTrigger") {
    var match$10 = code.VAL;
    var match$11 = evaluateBlock(match$10[0], match$10[2], context);
    var newContext = match$11[2];
    return Core__Array.reduce(match$10[1], {
                TAG: "Single",
                _0: {
                  TAG: "Data",
                  _0: {
                    NAME: "Block",
                    VAL: [
                      match$11[0],
                      match$11[1]
                    ]
                  }
                }
              }, (function (value, trigger) {
                  return evaluateTrigger(trigger, value, newContext);
                }));
  }
  if (variant === "Atom") {
    return {
            TAG: "Single",
            _0: {
              TAG: "Signal",
              _0: {
                TAG: "Atom",
                _0: Data.atomValue(evaluate(code.VAL, context))
              }
            }
          };
  }
  if (variant === "Bool") {
    return {
            TAG: "Single",
            _0: {
              TAG: "Data",
              _0: {
                NAME: "Bool",
                VAL: code.VAL
              }
            }
          };
  }
  if (variant === "Call") {
    var match$12 = code.VAL;
    var evalArgs = match$12[1].map(function (code) {
          return evaluate(code, context);
        });
    return mapOne(evaluate(match$12[0], context), (function (func) {
                  if (func !== undefined && typeof func === "object" && func.NAME === "Func") {
                    return func.VAL(evalArgs);
                  } else {
                    return "Empty";
                  }
                }));
  }
  var match$13 = code.VAL;
  var op = match$13[0];
  var match$14 = match$13[1].map(function (arg) {
        return evaluate(arg, context);
      });
  switch (op) {
    case "!" :
        if (match$14.length === 1) {
          var a = match$14[0];
          return mapOne(a, (function (a) {
                        return {
                                TAG: "Single",
                                _0: {
                                  TAG: "Data",
                                  _0: {
                                    NAME: "Bool",
                                    VAL: !Data.dataToBool(a)
                                  }
                                }
                              };
                      }));
        }
        break;
    case "!=" :
        if (match$14.length === 2) {
          var a$1 = match$14[0];
          var b = match$14[1];
          return mapTwo(a$1, b, (function (a, b) {
                        return {
                                TAG: "Single",
                                _0: {
                                  TAG: "Data",
                                  _0: {
                                    NAME: "Bool",
                                    VAL: !Data.dataEqual(a, b)
                                  }
                                }
                              };
                      }));
        }
        break;
    case "&" :
        if (match$14.length === 2) {
          var a$2 = match$14[0];
          var b$1 = match$14[1];
          return mapOne(a$2, (function (a) {
                        if (Data.dataToBool(a)) {
                          return b$1;
                        } else {
                          return Data.optionToSet(Core__Option.map(a, (function (x) {
                                            return {
                                                    TAG: "Data",
                                                    _0: x
                                                  };
                                          })));
                        }
                      }));
        }
        break;
    case "-" :
        if (match$14.length === 1) {
          var a$3 = match$14[0];
          return mapOne(a$3, (function (a) {
                        if (a !== undefined && typeof a === "object" && a.NAME === "Float") {
                          return {
                                  TAG: "Single",
                                  _0: {
                                    TAG: "Data",
                                    _0: {
                                      NAME: "Float",
                                      VAL: - a.VAL
                                    }
                                  }
                                };
                        } else {
                          return "Empty";
                        }
                      }));
        }
        break;
    case "=" :
        if (match$14.length === 2) {
          var a$4 = match$14[0];
          var b$2 = match$14[1];
          return mapTwo(a$4, b$2, (function (a, b) {
                        return {
                                TAG: "Single",
                                _0: {
                                  TAG: "Data",
                                  _0: {
                                    NAME: "Bool",
                                    VAL: Data.dataEqual(a, b)
                                  }
                                }
                              };
                      }));
        }
        break;
    case "?" :
        if (match$14.length === 3) {
          var test = match$14[0];
          var pass = match$14[1];
          var fail = match$14[2];
          return mapOne(test, (function (test) {
                        if (Data.dataToBool(test)) {
                          return pass;
                        } else {
                          return fail;
                        }
                      }));
        }
        break;
    case "_" :
        return mapArray(match$14, (function (args) {
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "String",
                                  VAL: Core__Array.filterMap(args, (function (arg) {
                                            if (arg === undefined) {
                                              return ;
                                            }
                                            if (typeof arg !== "object") {
                                              return ;
                                            }
                                            var variant = arg.NAME;
                                            if (variant === "String") {
                                              return arg.VAL;
                                            } else if (variant === "Float") {
                                              return arg.VAL.toString();
                                            } else {
                                              return ;
                                            }
                                          })).join("")
                                }
                              }
                            };
                    }));
    case "|" :
        if (match$14.length === 2) {
          var a$5 = match$14[0];
          var b$3 = match$14[1];
          return mapOne(a$5, (function (a) {
                        if (Data.dataToBool(a)) {
                          return Data.optionToSet(Core__Option.map(a, (function (x) {
                                            return {
                                                    TAG: "Data",
                                                    _0: x
                                                  };
                                          })));
                        } else {
                          return b$3;
                        }
                      }));
        }
        break;
    default:
      
  }
  if (match$14.length !== 2) {
    return "Empty";
  }
  var a$6 = match$14[0];
  var b$4 = match$14[1];
  return mapTwo(a$6, b$4, (function (a, b) {
                if (a === undefined) {
                  return "Empty";
                }
                if (typeof a !== "object") {
                  return "Empty";
                }
                if (a.NAME !== "Float") {
                  return "Empty";
                }
                if (b === undefined) {
                  return "Empty";
                }
                if (typeof b !== "object") {
                  return "Empty";
                }
                if (b.NAME !== "Float") {
                  return "Empty";
                }
                var b$1 = b.VAL;
                var a$1 = a.VAL;
                switch (op) {
                  case "%" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Float",
                                  VAL: ((a$1 - 1.0) % b$1 + b$1) % b$1 + 1.0
                                }
                              }
                            };
                  case "*" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Float",
                                  VAL: a$1 * b$1
                                }
                              }
                            };
                  case "+" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Float",
                                  VAL: a$1 + b$1
                                }
                              }
                            };
                  case "-" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Float",
                                  VAL: a$1 - b$1
                                }
                              }
                            };
                  case "/" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Float",
                                  VAL: a$1 / b$1
                                }
                              }
                            };
                  case "<" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Bool",
                                  VAL: a$1 < b$1
                                }
                              }
                            };
                  case "<=" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Bool",
                                  VAL: a$1 <= b$1
                                }
                              }
                            };
                  case ">" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Bool",
                                  VAL: a$1 > b$1
                                }
                              }
                            };
                  case ">=" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Bool",
                                  VAL: a$1 >= b$1
                                }
                              }
                            };
                  case "^" :
                      return {
                              TAG: "Single",
                              _0: {
                                TAG: "Data",
                                _0: {
                                  NAME: "Float",
                                  VAL: Math.pow(a$1, b$1)
                                }
                              }
                            };
                  default:
                    return "Empty";
                }
              }));
}

export {
  Has_Signal ,
  tryValueToData ,
  signalValueToData ,
  signalMap ,
  mapOne ,
  mapTwo ,
  mapArray ,
  tryGetIndex ,
  getIndex ,
  evaluateBlock ,
  evaluateTrigger ,
  evaluate ,
}
/* Data Not a pure module */
