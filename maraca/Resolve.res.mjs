// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Data from "./Data.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function filterMapDict(dict, map) {
  return Object.fromEntries(Core__Array.filterMap(Object.entries(dict), (function (param) {
                    var key = param[0];
                    return Core__Option.map(map(param[1]), (function (v) {
                                  return [
                                          key,
                                          v
                                        ];
                                }));
                  })));
}

function resolveValueOption(value) {
  var data = Data.setToOption(value);
  if (data !== undefined) {
    return resolveDataOption(data);
  }
  
}

function resolveDataOption(data) {
  if (data.TAG === "Data") {
    return data._0;
  } else {
    return resolveValueOption(Data.get(data._0));
  }
}

function resolveValueArray(value) {
  return Data.setToArray(value).flatMap(function (data) {
              if (data.TAG === "Data") {
                return [data._0];
              } else {
                return resolveValueArray(Data.get(data._0));
              }
            });
}

function resolveItemsArray(items) {
  return items.flatMap(function (data) {
                return resolveValueArray(data);
              }).map(function (data) {
              return {
                      TAG: "Single",
                      _0: {
                        TAG: "Data",
                        _0: data
                      }
                    };
            });
}

function resolveDeepValueOption(value) {
  var data = Data.setToOption(value);
  if (data !== undefined) {
    return resolveDeepDataOption(data);
  }
  
}

function resolveDeepDataOption(data) {
  if (data.TAG === "Data") {
    return resolveDeepSemi(data._0);
  } else {
    return resolveDeepValueOption(Data.get(data._0));
  }
}

function resolveDeepValueArray(value) {
  return Data.setToArray(value).flatMap(function (data) {
              return resolveDeepDataArray(data);
            });
}

function resolveDeepDataArray(data) {
  if (data.TAG === "Data") {
    return [resolveDeepSemi(data._0)];
  } else {
    return resolveDeepValueArray(Data.get(data._0));
  }
}

function resolveDeepSemi(data) {
  var variant = data.NAME;
  if (variant !== "Block") {
    if (variant === "Float") {
      return {
              NAME: "Float",
              VAL: data.VAL
            };
    } else if (variant === "Bool") {
      return {
              NAME: "Bool",
              VAL: data.VAL
            };
    } else if (variant === "Func") {
      return {
              NAME: "Bool",
              VAL: false
            };
    } else {
      return {
              NAME: "String",
              VAL: data.VAL
            };
    }
  }
  var match = data.VAL;
  return {
          NAME: "Block",
          VAL: [
            filterMapDict(match[0], (function (data) {
                    return resolveDeepValueOption(data);
                  })),
            match[1].flatMap(function (data) {
                  return resolveDeepValueArray(data);
                })
          ]
        };
}

function resolveSignalAtom(signal) {
  if (signal.TAG === "Atom") {
    return signal._0[1];
  } else {
    return resolveValueAtom(signal._0());
  }
}

function resolveValueAtom(value) {
  var data = Data.setToOption(value);
  if (data !== undefined) {
    return resolveDataAtom(data);
  }
  
}

function resolveDataAtom(data) {
  if (data.TAG === "Data") {
    return ;
  } else {
    return resolveSignalAtom(data._0);
  }
}

export {
  filterMapDict ,
  resolveValueOption ,
  resolveDataOption ,
  resolveValueArray ,
  resolveItemsArray ,
  resolveDeepValueOption ,
  resolveDeepDataOption ,
  resolveDeepValueArray ,
  resolveDeepDataArray ,
  resolveDeepSemi ,
  resolveSignalAtom ,
  resolveValueAtom ,
  resolveDataAtom ,
}
/* Data Not a pure module */
